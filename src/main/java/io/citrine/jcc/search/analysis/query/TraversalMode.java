package io.citrine.jcc.search.analysis.query;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

/**
 * Mode used to traverse analysis graphs.
 *
 * @author Kyle Michel
 */
public enum TraversalMode {

    /** Analyze all buckets generated by this analysis, trim, then perform sub-analyses. */
    BREADTH_FIRST,

    /** Analyze all buckets generated this analysis, perform sub-analyses, then trim. */
    DEPTH_FIRST;

    /**
     * Get a {@link TraversalMode} object by its name.
     *
     * @param traversalMode String with the name of the traversal mode type.
     * @return {@link TraversalMode} object or a null pointer if the input name is not valid.
     */
    @JsonCreator
    public static TraversalMode get(final String traversalMode) {
        return NAME_TO_TRAVERSAL_MODE_MAP.get(normalizeName(traversalMode));
    }

    @Override
    @JsonValue
    public String toString() {
        return this.name();
    }

    /**
     * Normalize an input string for lookup.
     *
     * @param traversalMode String with the name of the traversal mode type.
     * @return Normalized version of the input string.
     */
    private static String normalizeName(final String traversalMode) {
        return (traversalMode == null) ? null : traversalMode.toLowerCase();
    }

    /** Map of names to objects. */
    private static final Map<String, TraversalMode> NAME_TO_TRAVERSAL_MODE_MAP = buildNameToTraversalModeMap();

    /**
     * Create the map of traversal mode names to objects.
     *
     * @return Map of traversal mode names to {@link TraversalMode} objects
     */
    private static Map<String, TraversalMode> buildNameToTraversalModeMap() {
        final Map<String, TraversalMode> res = new HashMap<>(TraversalMode.values().length);
        for (TraversalMode i : TraversalMode.values()) {
            res.put(normalizeName(i.name()), i);
        }
        return Collections.unmodifiableMap(res);
    }
}